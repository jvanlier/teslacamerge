#!/usr/bin/env python
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
import logging

import click

from tcmlib import loader
from tcmlib import videoproc

logging.basicConfig(level=logging.DEBUG,
                    format="%(asctime)s %(levelname)s [%(module)s/%(funcName)s]: %(message)s")
LOG = logging.getLogger(__name__)


@click.command()
@click.option("-s", "--src", required=True,
              help="Path to video dir (e.g. /path/to/TeslaCam/SavedClips")
@click.option("-d", "--dest", required=True,
              help="Destination path")
@click.option("-x", "--speed-ratio", default=2,
              help="Speed ratio; 1 is normal, 2 is twice as fast. Default is 2.")
@click.option("-m", "--mins-back", default=2,
              help="Number of videos, or minutes to look back (if available). Recommended is a bit higher "
                   "than 1, because the last video might be really short. Default is 2.")
@click.option("-w", "--num-workers", default=7,
              help="Number of workers for ThreadPoolExecutor; each thread roughly corresponds to a CPU core "
                   "because all the work is being done in OpenCV code (outside of the GIL).")
def main(src, dest, speed_ratio, mins_back, num_workers):
    src, dest = loader.parse_paths(src, dest)

    start = datetime.now()
    # The length check below serves as a simple-but-effective way to eliminate things like MacOS's .DS_Store.
    event_paths = reversed(sorted((p for p in src.glob("*") if len(p.name) == loader.DATE_PREFIX_LENGTH)))
    multi_event_vgs = [list(loader.generate_latest_video_groups(path, last_n=mins_back))
                       for path in event_paths]
    LOG.info(f"Indexed {len(multi_event_vgs)} paths.")

    def wrapped_merge():
        """Wrap the merge function in order to pass dest and speed_ratio."""
        def func(single_event_vg):
            return videoproc.merge(single_event_vg, dest, speed_ratio)
        return func

    with ThreadPoolExecutor(max_workers=num_workers) as exc:
        exc.map(wrapped_merge(), multi_event_vgs)

    end = datetime.now()
    LOG.info("Processing took {:.0f} sec".format((end - start).total_seconds()))


if __name__ == "__main__":
    main()
